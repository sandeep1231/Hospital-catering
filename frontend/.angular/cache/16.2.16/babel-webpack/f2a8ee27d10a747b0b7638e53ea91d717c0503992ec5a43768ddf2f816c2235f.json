{"ast":null,"code":"import { ApiService } from '../../services/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ReportsDashboardComponent_div_22_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 13);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const r_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r2.inDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r2.dischargeDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r2.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r2.phone);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 5, r_r2.billAmount, \"1.2-2\"));\n  }\n}\nfunction ReportsDashboardComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"table\", 12)(2, \"thead\")(3, \"tr\")(4, \"th\");\n    i0.ɵɵtext(5, \"In Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Discharge Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9, \"Patient Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11, \"Phone\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 13);\n    i0.ɵɵtext(13, \"Bill Amount\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"tbody\");\n    i0.ɵɵtemplate(15, ReportsDashboardComponent_div_22_tr_15_Template, 12, 8, \"tr\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"tfoot\")(17, \"tr\")(18, \"th\", 15);\n    i0.ɵɵtext(19, \"Total\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"th\", 13);\n    i0.ɵɵtext(21);\n    i0.ɵɵpipe(22, \"number\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.businessRows);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(22, 2, ctx_r0.businessTotal, \"1.2-2\"));\n  }\n}\nexport let ReportsDashboardComponent = /*#__PURE__*/(() => {\n  class ReportsDashboardComponent {\n    constructor(api) {\n      this.api = api;\n      this.period = 'daily';\n      this.date = new Date().toISOString().substring(0, 10);\n      this.vendorSummary = null;\n      // custom range vendor business summary\n      this.rangeFrom = '';\n      this.rangeTo = '';\n      this.businessRows = [];\n      this.businessLoading = false;\n      this.businessTotal = 0;\n      this.patientId = '';\n      this.from = '';\n      this.to = '';\n      this.patientSearch = '';\n      this.patientMatches = [];\n      this.selectedPatient = null;\n      this.loading = false;\n    }\n    loadSummary() {\n      this.loading = true;\n      this.api.get('/reports/vendor', {\n        period: this.period,\n        date: this.date\n      }).subscribe({\n        next: res => {\n          this.vendorSummary = res;\n          this.loading = false;\n        },\n        error: e => {\n          console.error(e);\n          this.loading = false;\n        }\n      });\n    }\n    searchPatients() {\n      const q = this.patientSearch.trim();\n      clearTimeout(this.searchTimer);\n      if (q.length < 2) {\n        this.patientMatches = [];\n        return;\n      }\n      this.searchTimer = setTimeout(() => {\n        this.api.get('/patients', {\n          q\n        }).subscribe({\n          next: list => {\n            this.patientMatches = list || [];\n          },\n          error: e => {\n            console.error(e);\n          }\n        });\n      }, 200);\n    }\n    selectPatient(p) {\n      this.selectedPatient = p;\n      this.patientId = p.code || p._id;\n      this.patientMatches = [];\n      // Only show MRN if a patient code exists; never display ObjectId as MRN\n      this.patientSearch = p.code ? `${p.name} — MRN: ${p.code}` : p.name;\n    }\n    downloadPatientPdf() {\n      if (!this.patientId) return;\n      const params = {};\n      if (this.from) params.from = this.from;\n      if (this.to) params.to = this.to;\n      this.api.getBlob(`/reports/patient/${encodeURIComponent(this.patientId)}/pdf`, params).subscribe({\n        next: resp => {\n          const blob = resp.body;\n          const cd = resp.headers?.get ? resp.headers.get('Content-Disposition') : null;\n          let filename = 'patient-billing.pdf';\n          if (cd) {\n            const match = /filename=\\\"?([^\\\";]+)\\\"?/i.exec(cd);\n            if (match) filename = match[1];\n          }\n          const url = window.URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = filename;\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          setTimeout(() => URL.revokeObjectURL(url), 1000);\n        },\n        error: e => {\n          console.error(e);\n        }\n      });\n    }\n    loadBusinessRange() {\n      if (!this.rangeFrom || !this.rangeTo) return;\n      this.businessLoading = true;\n      this.api.get('/reports/vendor/business-range', {\n        from: this.rangeFrom,\n        to: this.rangeTo\n      }).subscribe({\n        next: rows => {\n          // normalize dates for display as yyyy-MM-dd\n          this.businessRows = (rows || []).map(r => ({\n            inDate: r.inDate ? new Date(r.inDate).toISOString().substring(0, 10) : '',\n            dischargeDate: r.dischargeDate ? new Date(r.dischargeDate).toISOString().substring(0, 10) : '',\n            name: r.name || '',\n            phone: r.phone || '',\n            billAmount: Number(r.billAmount || 0)\n          }));\n          this.businessTotal = this.businessRows.reduce((sum, r) => sum + (Number(r.billAmount) || 0), 0);\n          this.businessLoading = false;\n        },\n        error: e => {\n          console.error(e);\n          this.businessLoading = false;\n        }\n      });\n    }\n    printBusinessRange() {\n      // Use default window.print() so it respects browser settings and avoids pop-up blockers.\n      // Global @media print CSS ensures only #businessRangeTable is visible when printing.\n      const tableEl = document.getElementById('businessRangeTable');\n      if (!tableEl) return;\n      window.print();\n    }\n    static {\n      this.ɵfac = function ReportsDashboardComponent_Factory(t) {\n        return new (t || ReportsDashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ReportsDashboardComponent,\n        selectors: [[\"app-reports-dashboard\"]],\n        decls: 23,\n        vars: 5,\n        consts: [[1, \"container\", \"py-3\"], [1, \"card\", \"mb-3\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"row\", \"g-2\", \"align-items-end\"], [1, \"col-auto\"], [1, \"form-label\"], [\"type\", \"date\", 1, \"form-control\", \"form-control-sm\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-sm\", \"btn-outline-primary\", 3, \"disabled\", \"click\"], [1, \"btn\", \"btn-sm\", \"btn-outline-secondary\", 3, \"disabled\", \"click\"], [\"class\", \"table-responsive mt-3\", 4, \"ngIf\"], [1, \"table-responsive\", \"mt-3\"], [\"id\", \"businessRangeTable\", 1, \"table\", \"table-sm\", \"table-bordered\"], [1, \"text-end\"], [4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"4\", 1, \"text-end\"]],\n        template: function ReportsDashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n            i0.ɵɵtext(2, \"Reports\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"h6\", 3);\n            i0.ɵɵtext(6, \"Business Summary (Date Range)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"label\", 6);\n            i0.ɵɵtext(10, \"From\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"input\", 7);\n            i0.ɵɵlistener(\"ngModelChange\", function ReportsDashboardComponent_Template_input_ngModelChange_11_listener($event) {\n              return ctx.rangeFrom = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 6);\n            i0.ɵɵtext(14, \"To\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"input\", 7);\n            i0.ɵɵlistener(\"ngModelChange\", function ReportsDashboardComponent_Template_input_ngModelChange_15_listener($event) {\n              return ctx.rangeTo = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(16, \"div\", 5)(17, \"button\", 8);\n            i0.ɵɵlistener(\"click\", function ReportsDashboardComponent_Template_button_click_17_listener() {\n              return ctx.loadBusinessRange();\n            });\n            i0.ɵɵtext(18, \"Run Range\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(19, \"div\", 5)(20, \"button\", 9);\n            i0.ɵɵlistener(\"click\", function ReportsDashboardComponent_Template_button_click_20_listener() {\n              return ctx.printBusinessRange();\n            });\n            i0.ɵɵtext(21, \"Print\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(22, ReportsDashboardComponent_div_22_Template, 23, 5, \"div\", 10);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(11);\n            i0.ɵɵproperty(\"ngModel\", ctx.rangeFrom);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.rangeTo);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.businessLoading || !ctx.rangeFrom || !ctx.rangeTo);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", !ctx.businessRows.length);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.businessRows.length);\n          }\n        },\n        dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DecimalPipe]\n      });\n    }\n  }\n  return ReportsDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}