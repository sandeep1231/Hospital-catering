{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ToastService = /*#__PURE__*/(() => {\n  class ToastService {\n    constructor() {\n      this.toasts = [];\n      this.subject = new Subject();\n    }\n    getToasts() {\n      return this.subject.asObservable();\n    }\n    show(toast) {\n      toast.id = Date.now() + Math.floor(Math.random() * 1000);\n      if (toast.timeout === undefined) toast.timeout = 5000;\n      this.toasts = [toast, ...this.toasts];\n      this.subject.next(this.toasts);\n      if (toast.timeout > 0) {\n        setTimeout(() => {\n          this.remove(toast.id);\n        }, toast.timeout);\n      }\n    }\n    success(message, timeout) {\n      this.show({\n        type: 'success',\n        message,\n        timeout\n      });\n    }\n    error(message, timeout) {\n      this.show({\n        type: 'error',\n        message,\n        timeout\n      });\n    }\n    info(message, timeout) {\n      this.show({\n        type: 'info',\n        message,\n        timeout\n      });\n    }\n    warning(message, timeout) {\n      this.show({\n        type: 'warning',\n        message,\n        timeout\n      });\n    }\n    remove(id) {\n      this.toasts = this.toasts.filter(t => t.id !== id);\n      this.subject.next(this.toasts);\n    }\n    clear() {\n      this.toasts = [];\n      this.subject.next(this.toasts);\n    }\n    static {\n      this.ɵfac = function ToastService_Factory(t) {\n        return new (t || ToastService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ToastService,\n        factory: ToastService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ToastService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}