{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      // Dynamically choose API base:\n      // - If served from GitHub Pages, call the Render backend\n      // - Otherwise (e.g., local dev), call localhost\n      this.base = (() => {\n        const renderBase = 'https://hospital-catering-2.onrender.com/api';\n        const localBase = 'http://localhost:4000/api';\n        try {\n          const host = typeof window !== 'undefined' && window.location && window.location.host ? window.location.host : '';\n          if (host.includes('github.io')) return renderBase;\n          return localBase;\n        } catch {\n          return localBase;\n        }\n      })();\n    }\n    getHeaders() {\n      const token = localStorage.getItem('token');\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      if (token) headers = headers.set('Authorization', `Bearer ${token}`);\n      return {\n        headers\n      };\n    }\n    get(path, params) {\n      const options = this.getHeaders();\n      if (params) options.params = params;\n      return this.http.get(this.base + path, options);\n    }\n    post(path, body, params) {\n      const options = this.getHeaders();\n      if (params) options.params = params;\n      return this.http.post(this.base + path, body, options);\n    }\n    put(path, body, params) {\n      const options = this.getHeaders();\n      if (params) options.params = params;\n      return this.http.put(this.base + path, body, options);\n    }\n    delete(path, params) {\n      const options = this.getHeaders();\n      if (params) options.params = params;\n      return this.http.delete(this.base + path, options);\n    }\n    // blob download with auth header\n    getBlob(path, params) {\n      const options = this.getHeaders();\n      if (params) options.params = params;\n      options.responseType = 'blob';\n      options.observe = 'response';\n      return this.http.get(this.base + path, options);\n    }\n    // auth helpers\n    setToken(token) {\n      localStorage.setItem('token', token);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    removeToken() {\n      localStorage.removeItem('token');\n    }\n    // parse JWT payload (no verification, used only client-side)\n    parseJwt(token) {\n      if (!token) return null;\n      try {\n        const parts = token.split('.');\n        if (parts.length !== 3) return null;\n        const payload = JSON.parse(atob(parts[1]));\n        return payload;\n      } catch (e) {\n        return null;\n      }\n    }\n    getUser() {\n      return this.parseJwt(this.getToken());\n    }\n    getUserRole() {\n      const u = this.getUser();\n      return u?.role || null;\n    }\n    isLoggedIn() {\n      const token = this.getToken();\n      if (!token) return false;\n      const payload = this.parseJwt(token);\n      if (payload?.exp && Date.now() >= payload.exp * 1000) {\n        this.logout();\n        return false;\n      }\n      return true;\n    }\n    logout() {\n      this.removeToken();\n      this.router.navigate(['/login']);\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}