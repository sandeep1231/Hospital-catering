{"ast":null,"code":"import _asyncToGenerator from \"D:/catering/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ApiService } from '../../services/api.service';\nimport { ToastService } from '../../services/toast.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api.service\";\nimport * as i2 from \"../../services/toast.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/forms\";\nfunction DietPlanEditorComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const p_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", p_r5._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate4(\"\", p_r5.name, \" (\", p_r5.mrn || \"no MRN\", \") \\u2014 \", p_r5.ward || \"\", \"/\", p_r5.bed || \"\", \"\");\n  }\n}\nfunction DietPlanEditorComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtext(1, \" Please set MRN/Patient ID for this patient in their profile before assigning a plan. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DietPlanEditorComponent_div_40_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 34)(1, \"input\", 35);\n    i0.ɵɵlistener(\"change\", function DietPlanEditorComponent_div_40_div_4_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r8 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.toggleDay(i_r8));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 36);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const d_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"day\" + i_r8)(\"checked\", ctx_r6.selectedDays.includes(i_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", \"day\" + i_r8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(d_r7);\n  }\n}\nfunction DietPlanEditorComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"label\", 7);\n    i0.ɵɵtext(2, \"Repeat on\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 32);\n    i0.ɵɵtemplate(4, DietPlanEditorComponent_div_40_div_4_Template, 4, 4, \"div\", 33);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.week);\n  }\n}\nfunction DietPlanEditorComponent_div_44_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 51)(1, \"label\", 34)(2, \"input\", 52);\n    i0.ɵɵlistener(\"change\", function DietPlanEditorComponent_div_44_div_14_Template_input_change_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const m_r15 = restoredCtx.$implicit;\n      const meal_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.toggleItemWithNotes(meal_r11, m_r15._id, $event.target.checked));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 53);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const m_r15 = ctx.$implicit;\n    const meal_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r13.isChecked(meal_r11.items, m_r15._id));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(m_r15.name);\n  }\n}\nfunction DietPlanEditorComponent_div_44_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 56)(1, \"textarea\", 57);\n    i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_div_44_div_15_div_1_Template_textarea_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const m_r20 = i0.ɵɵnextContext().$implicit;\n      const meal_r11 = i0.ɵɵnextContext().$implicit;\n      return i0.ɵɵresetView(meal_r11.itemNotes[m_r20._id] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const m_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext();\n    const idx_r12 = ctx_r27.index;\n    const meal_r11 = ctx_r27.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Notes/instructions for \", m_r20.name, \" (optional)\");\n    i0.ɵɵpropertyInterpolate2(\"name\", \"note\", idx_r12, \"\", m_r20._id, \"\");\n    i0.ɵɵproperty(\"ngModel\", meal_r11.itemNotes[m_r20._id]);\n  }\n}\nfunction DietPlanEditorComponent_div_44_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 54);\n    i0.ɵɵtemplate(1, DietPlanEditorComponent_div_44_div_15_div_1_Template, 2, 4, \"div\", 55);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const m_r20 = ctx.$implicit;\n    const meal_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.isChecked(meal_r11.items, m_r20._id));\n  }\n}\nfunction DietPlanEditorComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 37)(1, \"div\", 38)(2, \"div\", 39)(3, \"select\", 40);\n    i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_div_44_Template_select_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r30);\n      const meal_r11 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(meal_r11.slot = $event);\n    });\n    i0.ɵɵelementStart(4, \"option\", 41);\n    i0.ɵɵtext(5, \"Breakfast\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\", 42);\n    i0.ɵɵtext(7, \"Lunch\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"option\", 43);\n    i0.ɵɵtext(9, \"Dinner\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"option\", 44);\n    i0.ɵɵtext(11, \"Snack\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 45)(13, \"div\", 46);\n    i0.ɵɵtemplate(14, DietPlanEditorComponent_div_44_div_14_Template, 5, 2, \"div\", 47);\n    i0.ɵɵtemplate(15, DietPlanEditorComponent_div_44_div_15_Template, 2, 1, \"div\", 48);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 49)(17, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function DietPlanEditorComponent_div_44_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r30);\n      const idx_r12 = restoredCtx.index;\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.removeMeal(idx_r12));\n    });\n    i0.ɵɵtext(18, \"Remove\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const meal_r11 = ctx.$implicit;\n    const idx_r12 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"name\", \"slot\", idx_r12, \"\");\n    i0.ɵɵproperty(\"ngModel\", meal_r11.slot);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.menu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.menu);\n  }\n}\nconst _c0 = function () {\n  return [\"/orders\"];\n};\nfunction DietPlanEditorComponent_div_53_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 60);\n    i0.ɵɵtext(1, \"View orders\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nfunction DietPlanEditorComponent_div_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 58);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, DietPlanEditorComponent_div_53_a_2_Template, 2, 2, \"a\", 59);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.message, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.hasOrderLink);\n  }\n}\nexport let DietPlanEditorComponent = /*#__PURE__*/(() => {\n  class DietPlanEditorComponent {\n    constructor(api, toast) {\n      this.api = api;\n      this.toast = toast;\n      this.patients = [];\n      this.menu = [];\n      this.message = '';\n      this.hasOrderLink = false;\n      this.week = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      this.selectedDays = [];\n      this.model = {\n        name: '',\n        patientId: '',\n        startDate: this.toDateInput(new Date()),\n        endDate: '',\n        recurrence: 'weekly',\n        // each meal now also tracks itemNotes: { [menuItemId]: string }\n        meals: [{\n          slot: 'breakfast',\n          items: [],\n          itemNotes: {}\n        }]\n      };\n    }\n    ngOnInit() {\n      this.loadPatients();\n      this.loadMenu();\n    }\n    toDateInput(d) {\n      const yyyy = d.getFullYear();\n      const mm = String(d.getMonth() + 1).padStart(2, '0');\n      const dd = String(d.getDate()).padStart(2, '0');\n      return `${yyyy}-${mm}-${dd}`;\n    }\n    loadPatients() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.api.get('/patients').subscribe(res => _this.patients = res, console.error);\n      })();\n    }\n    loadMenu() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.api.get('/menu').subscribe(res => _this2.menu = res, console.error);\n      })();\n    }\n    addMeal() {\n      this.model.meals.push({\n        slot: 'breakfast',\n        items: [],\n        itemNotes: {}\n      });\n    }\n    removeMeal(i) {\n      this.model.meals.splice(i, 1);\n    }\n    toggleDay(i) {\n      const idx = this.selectedDays.indexOf(i);\n      if (idx === -1) this.selectedDays.push(i);else this.selectedDays.splice(idx, 1);\n    }\n    isChecked(arr, id) {\n      return Array.isArray(arr) && arr.includes(id);\n    }\n    toggleItem(arr, id, checked) {\n      if (!Array.isArray(arr)) return;\n      const i = arr.indexOf(id);\n      if (checked && i === -1) arr.push(id);\n      if (!checked && i !== -1) arr.splice(i, 1);\n    }\n    // track notes when toggling\n    toggleItemWithNotes(meal, id, checked) {\n      this.toggleItem(meal.items, id, checked);\n      if (!meal.itemNotes) meal.itemNotes = {};\n      if (!checked) delete meal.itemNotes[id];\n    }\n    buildDays() {\n      if (this.model.recurrence === 'weekly') {\n        if (this.selectedDays.length === 0) return [{\n          dayIndex: 0,\n          meals: this.cloneMeals()\n        }];\n        return this.selectedDays.map(d => ({\n          dayIndex: d,\n          meals: this.cloneMeals()\n        }));\n      }\n      return [{\n        dayIndex: 0,\n        meals: this.cloneMeals()\n      }];\n    }\n    // convert selected items + notes to [{id, notes}] so backend stores notes\n    cloneMeals() {\n      return this.model.meals.map(m => ({\n        slot: m.slot,\n        items: (Array.isArray(m.items) ? m.items : [m.items].filter(Boolean)).map(id => ({\n          id,\n          notes: (m.itemNotes || {})[id] || undefined\n        }))\n      }));\n    }\n    selectedPatientMrn() {\n      const p = this.patients.find(x => x._id === this.model.patientId);\n      return p?.mrn ? String(p.mrn) : '';\n    }\n    save(e) {\n      e.preventDefault();\n      // if a patient is chosen, enforce MRN presence\n      if (this.model.patientId && !this.selectedPatientMrn()) {\n        this.toast.error('Please set MRN/Patient ID for the selected patient before saving.');\n        return;\n      }\n      const payload = {\n        name: this.model.name,\n        patientId: this.model.patientId || undefined,\n        startDate: this.model.startDate,\n        endDate: this.model.endDate || undefined,\n        recurrence: this.model.recurrence,\n        days: this.buildDays(),\n        notes: ''\n      };\n      this.api.post('/diet-plans', payload).subscribe(res => {\n        const created = res?.createdOrder;\n        if (created) {\n          this.toast.success('Plan saved and today\\'s order created.');\n          this.message = `Order created for ${new Date(created.date).toLocaleDateString()}.`;\n          this.hasOrderLink = true;\n        } else {\n          this.toast.success('Plan saved');\n          this.message = 'Plan saved.';\n          this.hasOrderLink = false;\n        }\n        setTimeout(() => this.message = '', 4000);\n        this.reset(false);\n      }, err => {\n        console.error(err);\n        this.toast.error('Save failed');\n      });\n    }\n    reset(clearName = true) {\n      if (clearName) {\n        this.model = {\n          name: '',\n          patientId: '',\n          startDate: this.toDateInput(new Date()),\n          endDate: '',\n          recurrence: 'weekly',\n          meals: [{\n            slot: 'breakfast',\n            items: [],\n            itemNotes: {}\n          }]\n        };\n        this.selectedDays = [];\n      } else {\n        this.model.meals = [{\n          slot: 'breakfast',\n          items: [],\n          itemNotes: {}\n        }];\n        this.selectedDays = [];\n      }\n      this.hasOrderLink = false;\n    }\n    static {\n      this.ɵfac = function DietPlanEditorComponent_Factory(t) {\n        return new (t || DietPlanEditorComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.ToastService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DietPlanEditorComponent,\n        selectors: [[\"app-diet-plan-editor\"]],\n        decls: 54,\n        vars: 10,\n        consts: [[1, \"d-flex\", \"mb-3\"], [1, \"me-auto\"], [1, \"btn\", \"btn-sm\", \"btn-outline-secondary\", 3, \"click\"], [1, \"card\", \"p-3\"], [3, \"submit\"], [1, \"row\", \"g-3\"], [1, \"col-12\", \"col-md-6\"], [1, \"form-label\"], [\"name\", \"name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"patientId\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"form-text\", 4, \"ngIf\"], [1, \"col-12\", \"col-md-4\"], [\"type\", \"date\", \"name\", \"startDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"name\", \"endDate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"recurrence\", 1, \"form-select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"none\"], [\"value\", \"daily\"], [\"value\", \"weekly\"], [\"value\", \"monthly\"], [\"class\", \"col-12\", 4, \"ngIf\"], [1, \"col-12\"], [\"class\", \"card mb-2 p-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"btn-sm\", 3, \"click\"], [1, \"col-12\", \"text-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"me-2\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"alert alert-success mt-3\", 4, \"ngIf\"], [3, \"value\"], [1, \"form-text\"], [1, \"d-flex\", \"flex-wrap\", \"gap-2\"], [\"class\", \"form-check\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-check\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"id\", \"checked\", \"change\"], [1, \"form-check-label\", \"ms-1\", 3, \"for\"], [1, \"card\", \"mb-2\", \"p-2\"], [1, \"row\", \"g-2\", \"align-items-start\"], [1, \"col-12\", \"col-md-3\"], [1, \"form-select\", 3, \"ngModel\", \"name\", \"ngModelChange\"], [\"value\", \"breakfast\"], [\"value\", \"lunch\"], [\"value\", \"dinner\"], [\"value\", \"snack\"], [1, \"col-12\", \"col-md-7\"], [1, \"d-flex\", \"flex-column\", \"gap-2\"], [\"class\", \"d-flex align-items-start\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"ps-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-12\", \"col-md-2\", \"text-end\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"], [1, \"d-flex\", \"align-items-start\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"checked\", \"change\"], [1, \"ms-2\"], [1, \"ps-4\"], [\"class\", \"mt-1\", 4, \"ngIf\"], [1, \"mt-1\"], [\"rows\", \"2\", 1, \"form-control\", \"form-control-sm\", 3, \"placeholder\", \"ngModel\", \"name\", \"ngModelChange\"], [1, \"alert\", \"alert-success\", \"mt-3\"], [\"class\", \"ms-2\", 3, \"routerLink\", 4, \"ngIf\"], [1, \"ms-2\", 3, \"routerLink\"]],\n        template: function DietPlanEditorComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n            i0.ɵɵtext(2, \"Diet Plan Editor\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"button\", 2);\n            i0.ɵɵlistener(\"click\", function DietPlanEditorComponent_Template_button_click_3_listener() {\n              return ctx.reset();\n            });\n            i0.ɵɵtext(4, \"New\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(5, \"div\", 3)(6, \"form\", 4);\n            i0.ɵɵlistener(\"submit\", function DietPlanEditorComponent_Template_form_submit_6_listener($event) {\n              return ctx.save($event);\n            });\n            i0.ɵɵelementStart(7, \"div\", 5)(8, \"div\", 6)(9, \"label\", 7);\n            i0.ɵɵtext(10, \"Plan name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"input\", 8);\n            i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_Template_input_ngModelChange_11_listener($event) {\n              return ctx.model.name = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 7);\n            i0.ɵɵtext(14, \"Patient (optional)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"select\", 9);\n            i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_Template_select_ngModelChange_15_listener($event) {\n              return ctx.model.patientId = $event;\n            });\n            i0.ɵɵelementStart(16, \"option\", 10);\n            i0.ɵɵtext(17, \"-- Unassigned --\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(18, DietPlanEditorComponent_option_18_Template, 2, 5, \"option\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(19, DietPlanEditorComponent_div_19_Template, 2, 0, \"div\", 12);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"div\", 13)(21, \"label\", 7);\n            i0.ɵɵtext(22, \"Start date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"input\", 14);\n            i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_Template_input_ngModelChange_23_listener($event) {\n              return ctx.model.startDate = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(24, \"div\", 13)(25, \"label\", 7);\n            i0.ɵɵtext(26, \"End date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(27, \"input\", 15);\n            i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_Template_input_ngModelChange_27_listener($event) {\n              return ctx.model.endDate = $event;\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(28, \"div\", 13)(29, \"label\", 7);\n            i0.ɵɵtext(30, \"Recurrence\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"select\", 16);\n            i0.ɵɵlistener(\"ngModelChange\", function DietPlanEditorComponent_Template_select_ngModelChange_31_listener($event) {\n              return ctx.model.recurrence = $event;\n            });\n            i0.ɵɵelementStart(32, \"option\", 17);\n            i0.ɵɵtext(33, \"None (single day)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"option\", 18);\n            i0.ɵɵtext(35, \"Daily\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"option\", 19);\n            i0.ɵɵtext(37, \"Weekly\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(38, \"option\", 20);\n            i0.ɵɵtext(39, \"Monthly\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(40, DietPlanEditorComponent_div_40_Template, 5, 1, \"div\", 21);\n            i0.ɵɵelementStart(41, \"div\", 22)(42, \"label\", 7);\n            i0.ɵɵtext(43, \"Meals (check menu items and add notes)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(44, DietPlanEditorComponent_div_44_Template, 19, 4, \"div\", 23);\n            i0.ɵɵelementStart(45, \"div\", 24)(46, \"button\", 25);\n            i0.ɵɵlistener(\"click\", function DietPlanEditorComponent_Template_button_click_46_listener() {\n              return ctx.addMeal();\n            });\n            i0.ɵɵtext(47, \"+ Add meal slot\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(48, \"div\", 26)(49, \"button\", 27);\n            i0.ɵɵlistener(\"click\", function DietPlanEditorComponent_Template_button_click_49_listener() {\n              return ctx.reset();\n            });\n            i0.ɵɵtext(50, \"Reset\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"button\", 28);\n            i0.ɵɵtext(52, \"Save Plan\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵtemplate(53, DietPlanEditorComponent_div_53_Template, 3, 2, \"div\", 29);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(11);\n            i0.ɵɵproperty(\"ngModel\", ctx.model.name);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.model.patientId);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.patients);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.model.patientId && ctx.selectedPatientMrn() === \"\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.model.startDate);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.model.endDate);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngModel\", ctx.model.recurrence);\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", ctx.model.recurrence === \"weekly\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.model.meals);\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", ctx.message);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm],\n        encapsulation: 2\n      });\n    }\n  }\n  return DietPlanEditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}